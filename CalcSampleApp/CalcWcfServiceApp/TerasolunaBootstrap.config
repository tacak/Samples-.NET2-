<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity"
             type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection,
                   Microsoft.Practices.Unity.Configuration,
                   Version=1.2.0.0,
                   Culture=neutral,
                   PublicKeyToken=31bf3856ad364e35" />
  </configSections>
  <unity>
    <typeAliases>
      <!-- LifetimeManagerの定義 -->
      <typeAlias alias="singleton"
                 type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager,
                       Microsoft.Practices.Unity,
                       Version=1.2.0.0,
                       Culture=neutral,
                       PublicKeyToken=31bf3856ad364e35" />
      <typeAlias alias="external"
                 type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager,
                       Microsoft.Practices.Unity,
                       Version=1.2.0.0,
                       Culture=neutral,
                       PublicKeyToken=31bf3856ad364e35" />
      <!-- AssemblyQualifiedTypeNameConverterの定義 -->
      <typeAlias alias="TypeNameConverter"
                 type="Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter,
                       Microsoft.Practices.Unity.Configuration,
                       Version=1.2.0.0,
                       Culture=neutral,
                       PublicKeyToken=31bf3856ad364e35" />
      <!-- 型の定義 -->
      <typeAlias alias="Type" type="System.Type" />
      <typeAlias alias="string" type="System.String" />
      <typeAlias alias="int" type="System.Int32" />
      <typeAlias alias="IInitializer[]" type="Terasoluna.Initialization.IInitializer[],
                      Terasoluna" />
      <typeAlias alias="IInitializer" type="Terasoluna.Initialization.IInitializer,
                      Terasoluna" />
      <typeAlias alias="SequenceInitializer" type="Terasoluna.Initialization.SequenceInitializer,
                      Terasoluna" />
      <typeAlias alias="IExceptionHandler" type="Terasoluna.ExceptionHandling.IExceptionHandler,
                      Terasoluna" />      
    </typeAliases>
    <containers>
      <container>
        <types>
          <!-- アプリケーション起動・終了機能の設定-->
          <type type="IInitializer" mapTo="SequenceInitializer">
            <lifetime type="singleton" />
            <typeConfig>
              <property name="Initializers" propertyType ="IInitializer[]">
                <array>
                  <dependency name="EmptyInitializer"/>
                </array>
              </property>
            </typeConfig>
          </type>
          <type type="IInitializer" name="EmptyInitializer"
                mapTo="Terasoluna.Initialization.EmptyInitializer, Terasoluna" >
            <lifetime type="singleton" />
          </type>
          <!-- サーバエラーハンドリング機能の設定 -->
          <!-- IErrorHandler.HandleErrorメソッドのポリシー -->
          <type type="IExceptionHandler" name="ServiceModelErrorHandlerHandleError"
                mapTo="Terasoluna.Server.ServiceModel.ExceptionHandling.DefaultLogExceptionHandler, Terasoluna.Server.ServiceModel" >
            <lifetime type="singleton" />
          </type>
          <!-- IErrorHandler.ProvideFaultメソッドのポリシー -->
          <type type="IExceptionHandler" name="ServiceModelErrorHandlerProvideFault"
                mapTo="Terasoluna.Server.ServiceModel.ExceptionHandling.DefaultResponseExceptionHandler,
                      Terasoluna.Server.ServiceModel" >
            <lifetime type="singleton" />
          </type>
        </types>
        <extensions>
        </extensions>
      </container>
    </containers>
  </unity>
</configuration>